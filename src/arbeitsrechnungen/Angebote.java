/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Angebote.java
 *
 * Created on 28.04.2009, 20:22:24
 */

package arbeitsrechnungen;

/**
 *
 * @author markus
 */

import java.sql.ResultSet;
import arbeitsabrechnungendataclass.Verbindung;
// import DialogBox.*;
import java.util.*;

public class Angebote extends javax.swing.JFrame {

    Verbindung verbindung;
    ResultSet klienten;
    ResultSet angebote;
    Vector<Punkt> klientenid = new Vector<Punkt>();   // a ist der Klient, b ist der Listenwert
    boolean wait = false;

    /** Creates new form Angebote */
    public Angebote() {
        initComponents();
        // Klientenliste in ComboBox eintragen und Formatieren.
        verbindung = new Verbindung("Arbeitrechnungen", "markus", "0773");
        updateKlienten();
        
        int klienten_id = 0;
        klienten_id = this.getklientID(jComboBoxKlienten.getSelectedIndex());        
        updateTabelle(klienten_id);
    }

    public int getklientID(int ComboboxID){
        return klientenid.elementAt(ComboboxID).getA();
    }
    public int getComboboxID(int klientID){
        int i=0;
        while(klientenid.elementAt(i).getA() != klientID
                & i <= klientenid.size()){
            i++;
        }
        return klientenid.elementAt(i).getB();
    }

    private void updateTabelle(int klient){

        //Preisspalte hat besondere Breite - die Größe wird abschließend neu gesetzt
        int maxwidth = jTable1.getColumnModel().getColumn(1).getMaxWidth();

        String sqltext = "SELECT angebote_id, klienten_id, Inhalt, Preis, Beschreibung FROM angebote WHERE klienten_id=" + klient;
        angebote = verbindung.query(sqltext);
        System.out.println(sqltext);

         javax.swing.table.DefaultTableModel mymodel = new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Inhalt", "Preis", "Beschreibung"
            }
        );

        try{
            int i = 0;
            while(angebote.next()){
                Vector<Object> einVektor = new Vector<Object>();
                einVektor.addElement(angebote.getString("Inhalt"));
                einVektor.addElement(angebote.getString("Preis"));
                einVektor.addElement(angebote.getString("Beschreibung"));

                mymodel.addRow(einVektor);
                i++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        jTable1.setModel(mymodel);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(maxwidth);
    }

    private void updateKlienten(){
        // Combobox wird geleert und mit der aktuellen Liste der Auftraggeber als Items gefüllt
        // Falls möglich, wird das vorher ausgewählte item beibehalten.
        int ausgewaehltes;
        wait = true;

        klienten = verbindung.query("SELECT klienten_id, auftraggeber FROM klienten;");
        ausgewaehltes = this.jComboBoxKlienten.getSelectedIndex();
        jComboBoxKlienten.removeAllItems();
        this.klientenid.clear();
        try{
            int i=0;
            while(klienten.next()){
                this.jComboBoxKlienten.insertItemAt(klienten.getString("auftraggeber"), i);
                this.klientenid.add(new Punkt(klienten.getInt("klienten_id"), i));
                i++;
            }
            if(ausgewaehltes >= 0){
                jComboBoxKlienten.setSelectedIndex(ausgewaehltes);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        wait = false;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelUeberschrift = new javax.swing.JLabel();
        jComboBoxKlienten = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonaddAngebot = new javax.swing.JButton();
        jButtonEditAngebot = new javax.swing.JButton();
        jButtonDeleteAngebot = new javax.swing.JButton();
        jButtonSchliessen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Angebote"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(arbeitsrechnungen.ArbeitsrechnungenApp.class).getContext().getResourceMap(Angebote.class);
        jLabelUeberschrift.setText(resourceMap.getString("jLabelUeberschrift.text")); // NOI18N
        jLabelUeberschrift.setName("jLabelUeberschrift"); // NOI18N

        jComboBoxKlienten.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxKlienten.setName("jComboBoxKlienten"); // NOI18N
        jComboBoxKlienten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxKlientenActionPerformed(evt);
            }
        });

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Inhalt", "Preis", "Beschreibung"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName("jTable1"); // NOI18N
        jTable1.setRowHeight(20);
        jScrollPane2.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTable1.columnModel.title0")); // NOI18N
        jTable1.getColumnModel().getColumn(1).setMaxWidth(211);
        jTable1.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTable1.columnModel.title1")); // NOI18N
        jTable1.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("jTable1.columnModel.title2")); // NOI18N

        jButtonaddAngebot.setText(resourceMap.getString("jButtonaddAngebot.text")); // NOI18N
        jButtonaddAngebot.setName("jButtonaddAngebot"); // NOI18N
        jButtonaddAngebot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonaddAngebotActionPerformed(evt);
            }
        });

        jButtonEditAngebot.setText(resourceMap.getString("jButtonEditAngebot.text")); // NOI18N
        jButtonEditAngebot.setName("jButtonEditAngebot"); // NOI18N
        jButtonEditAngebot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditAngebotActionPerformed(evt);
            }
        });

        jButtonDeleteAngebot.setText(resourceMap.getString("jButtonDeleteAngebot.text")); // NOI18N
        jButtonDeleteAngebot.setName("jButtonDeleteAngebot"); // NOI18N
        jButtonDeleteAngebot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteAngebotActionPerformed(evt);
            }
        });

        jButtonSchliessen.setText(resourceMap.getString("jButtonSchliessen.text")); // NOI18N
        jButtonSchliessen.setName("jButtonSchliessen"); // NOI18N
        jButtonSchliessen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSchliessenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelUeberschrift)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 429, Short.MAX_VALUE)
                                .addComponent(jButtonSchliessen))
                            .addComponent(jComboBoxKlienten, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonaddAngebot)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonEditAngebot)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonDeleteAngebot)
                        .addGap(38, 38, 38))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelUeberschrift)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxKlienten, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonSchliessen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonaddAngebot)
                    .addComponent(jButtonEditAngebot)
                    .addComponent(jButtonDeleteAngebot))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxKlientenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxKlientenActionPerformed
        
        if(!wait){
            int klienten_id = 0;
            klienten_id = this.getklientID(jComboBoxKlienten.getSelectedIndex());
            updateTabelle(klienten_id);
        }
    }//GEN-LAST:event_jComboBoxKlientenActionPerformed

    private void jButtonaddAngebotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonaddAngebotActionPerformed
        
        ResultSet tmp_record;
        int newrecordID;
        String sqltext;
        try {
            sqltext = "INSERT INTO angebote (klienten_id, Inhalt, Preis) " +
                    "VALUES (" + this.getklientID(this.jComboBoxKlienten.getSelectedIndex()) + ", \"<Bitte Stundeninhalt beschreiben>\", 0);";
            verbindung.sql(sqltext);
            System.out.println(sqltext);
            tmp_record = verbindung.query("SELECT LAST_INSERT_ID()");
            tmp_record.first();
            newrecordID = tmp_record.getInt(1);

            updateTabelle(newrecordID);    // Mit leerem Datensatz anzeigen
            sqltext = "SELECT angebote_id, klienten_id, Inhalt, Preis, Beschreibung FROM angebote WHERE klienten_id=" + this.getklientID(this.jComboBoxKlienten.getSelectedIndex()) + ";";
            System.out.println(sqltext);
            angebote = verbindung.query(sqltext);

            AngebotDialog eingabefenster = new AngebotDialog(this, newrecordID);
            eingabefenster.setVisible(true);

            int klienten_id = 0;
            klienten_id = this.getklientID(jComboBoxKlienten.getSelectedIndex());
            updateTabelle(klienten_id);    // Mit geändertem Datensatz anzeigen
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonaddAngebotActionPerformed

    private void jButtonEditAngebotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditAngebotActionPerformed
        if(this.jTable1.getSelectedRow() == -1){
            DialogBox.ModalDialog.OKDialog(this, "Bearbeitung abgebrochen!\nEin Eintrag muss ausgewählt sein!");
        }else{
            int datensatz;
            try{
                this.angebote.first();
                this.angebote.relative(this.jTable1.getSelectedRow());
                datensatz = this.angebote.getInt("angebote_id");
                AngebotDialog eingabefenster = new AngebotDialog(this, datensatz);
                eingabefenster.setVisible(true);

                int klienten_id = 0;
                klienten_id = this.getklientID(jComboBoxKlienten.getSelectedIndex());

                this.updateTabelle(klienten_id);
            }catch (Exception e) {
            e.printStackTrace();
        }
        }
    }//GEN-LAST:event_jButtonEditAngebotActionPerformed

    private void jButtonDeleteAngebotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteAngebotActionPerformed
        if(this.jTable1.getSelectedRow() == -1){
            DialogBox.ModalDialog.OKDialog(this, "Bearbeitung abgebrochen!\nEin Eintrag muss ausgewählt sein!");
        }else{
            try{
                this.angebote.first();
                this.angebote.relative(this.jTable1.getSelectedRow());
                int DatensatzID = this.angebote.getInt("angebote_id");

                String Datensatzname = this.angebote.getString("Inhalt");
                String Ergebnis = DialogBox.ModalDialog.YesNoDialog(this, "Soll der Datensatz " + Datensatzname +
                        " wirklich endgültig gelöscht werden?");
                if(Ergebnis.equals("Ja")){
                    String sqltext = "DELETE FROM angebote WHERE angebote_id=" + DatensatzID + ";";
                    System.out.println(sqltext);
                    verbindung.sql(sqltext);
                }
                int klienten_id = 0;
                klienten_id = this.getklientID(jComboBoxKlienten.getSelectedIndex());
                this.updateTabelle(klienten_id);
            }catch (Exception e) {
            e.printStackTrace();
        }
        }

    }//GEN-LAST:event_jButtonDeleteAngebotActionPerformed

    private void jButtonSchliessenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSchliessenActionPerformed
        this.setVisible(false);
        this.dispose();
}//GEN-LAST:event_jButtonSchliessenActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Angebote().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDeleteAngebot;
    private javax.swing.JButton jButtonEditAngebot;
    private javax.swing.JButton jButtonSchliessen;
    private javax.swing.JButton jButtonaddAngebot;
    private javax.swing.JComboBox jComboBoxKlienten;
    private javax.swing.JLabel jLabelUeberschrift;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
